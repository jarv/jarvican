// Generated by CoffeeScript 1.8.0
(function() {
  $(function() {
    var cfg, cfg_defaults, clear_board, collision, ctx, draw_circle, draw_rect, game, game_defaults, game_loop;
    ctx = $("#canvas")[0].getContext("2d");
    $("#canvas").click(function(e) {
      switch (game.state) {
        case "running":
          game.state = "hidden";
      }
    });
    $(".img-wrapper").click(function(e) {
      switch (game.state) {
        case "hidden":
          $(".img-wrapper").hide();
          $(".canvas-wrapper").show();
          $("#canvas")[0].width = 400;
          $("#canvas")[0].height = 200;
          game.dx = 4;
          game.dy = 8;
          game.x = 150;
          game.y = 150;
          game.height = $("#canvas").height();
          game.width = $("#canvas").width();
          game.mouse_min_x = $("#canvas").offset().left;
          game.mouse_max_x = game.mouse_min_x + game.width - cfg.paddle_width;
          game.paddle_x = game.width / 2;
          ctx.font = "" + cfg.font_size + "px " + cfg.font_name;
          cfg.char_width = Math.round(ctx.measureText(".").width);
          $.ajax({
            url: '/jarv.json',
            datatype: "json",
            success: function(data) {
              game.state = "running";
              game.disp_data = data;
              return setTimeout(game_loop, 10);
            }
          });
      }
    });
    $(document).keydown(function(evt) {
      switch (game.state) {
        case "running":
          if (evt.keyCode === 39) {
            game.right_down = true;
          } else if (evt.keyCode === 37) {
            game.left_down = true;
          }
      }
    });
    $(document).keyup(function(evt) {
      switch (game.state) {
        case "running":
          if (evt.keyCode === 39) {
            game.right_down = false;
          } else if (evt.keyCode === 37) {
            game.left_down = false;
          }
      }
    });
    $(document).mousemove(function(evt) {
      switch (game.state) {
        case "running":
          if (evt.pageX > game.mouse_min_x && evt.pageX < game.mouse_max_x) {
            return game.paddle_x = evt.pageX - game.mouse_min_x;
          }
      }
    });
    draw_circle = function(x, y, r) {
      ctx.beginPath();
      ctx.arc(x, y, r, 0, Math.PI * 2, true);
      ctx.closePath();
      ctx.fill();
    };
    draw_rect = function(x, y, w, h) {
      ctx.beginPath();
      ctx.rect(x, y, w, h);
      ctx.closePath();
      ctx.fill();
    };
    clear_board = function() {
      ctx.clearRect(0, 0, game.width, game.height);
    };
    collision = function(brick_x, brick_y) {
      var c_brick_x, c_brick_y;
      c_brick_x = brick_x + Math.round(cfg.char_width / 2);
      c_brick_y = brick_y + Math.round(cfg.font_size / 2);
      game.aoa = Math.atan2(game.y - c_brick_y, game.x - c_brick_x);
      switch (false) {
        case !(game.aoa <= Math.PI / 4 && game.aoa > -Math.PI / 4):
          if (game.dx <= 0) {
            game.dx = -game.dx;
          }
          break;
        case !(game.aoa <= -Math.PI / 4 && game.aoa > -3 * Math.PI / 4):
          if (game.dy >= 0) {
            game.dy = -game.dy;
          }
          break;
        case !((game.aoa <= -3 * Math.PI && game.aoa > -Math.PI) || (game.aoa <= Math.PI && game.aoa > 3 * Math.PI / 4)):
          if (game.dx >= 0) {
            game.dx = -game.dx;
          }
          break;
        case !(game.aoa <= 3 * Math.PI / 4 && game.aoa > Math.PI / 4):
          if (game.dy <= 0) {
            game.dy = -game.dy;
          }
      }
    };
    game_loop = function() {
      var brick_x, brick_y, column, column_index, line_cnt, line_offset, line_width, row, row_index, xpos, ypos, _i, _j, _len, _len1, _ref;
      clear_board();
      ypos = Math.round(cfg.font_size * 1.1);
      line_offset = game.disp_data.length * cfg.font_size;
      _ref = game.disp_data;
      for (row_index = _i = 0, _len = _ref.length; _i < _len; row_index = ++_i) {
        row = _ref[row_index];
        line_cnt = 0;
        line_width = row.length;
        xpos = Math.round((game.width / 2) - (line_width * cfg.char_width / 2));
        for (column_index = _j = 0, _len1 = row.length; _j < _len1; column_index = ++_j) {
          column = row[column_index];
          brick_x = xpos;
          brick_y = ypos;
          if (column !== " ") {
            if (!((game.x - game.ball_radius > brick_x + cfg.char_width) || (game.x + game.ball_radius < brick_x) || (game.y - game.ball_radius > brick_y + cfg.font_size) || (game.y + game.ball_radius < brick_y))) {
              collision(brick_x, brick_y);
              game.disp_data[row_index][column_index] = " ";
            }
          }
          ctx.fillStyle = '#939393';
          ctx.fillText(column, brick_x, brick_y);
          xpos += cfg.char_width;
        }
        ypos += cfg.font_size;
      }
      if (game.state === "running") {
        draw_circle(game.x, game.y, game.ball_radius);
        if (game.right_down) {
          if (game.paddle_x + cfg.paddle_width < game.width) {
            game.paddle_x += 5;
          }
        } else if (game.left_down) {
          if (game.paddle_x > 0) {
            game.paddle_x -= 5;
          }
        }
        draw_rect(game.paddle_x, game.height - cfg.paddle_height, cfg.paddle_width, cfg.paddle_height);
        if (game.x + game.ball_radius > game.width || game.x - game.ball_radius < 0) {
          game.dx = -game.dx;
        }
        if (game.y - game.ball_radius < 0) {
          game.dy = -game.dy;
        } else if (game.y + game.ball_radius > game.height - cfg.paddle_height) {
          if (game.x + game.ball_radius > game.paddle_x && game.x - game.ball_radius < (game.paddle_x + cfg.paddle_width)) {
            game.dy = -game.dy;
          } else {
            game.dy = -game.dy;
          }
        }
        game.x += game.dx;
        game.y += game.dy;
      }
      switch (game.state) {
        case "running":
          setTimeout(game_loop, 10);
          break;
        case "hidden":
          $(".img-wrapper").show();
          $(".canvas-wrapper").hide();
      }
    };
    cfg_defaults = {
      paddle_height: 4,
      paddle_width: 30,
      font_size: 8,
      font_name: "'Courier New', Monospace",
      figlet_font: "doh"
    };
    game_defaults = {
      str: "jarv",
      dx: 2,
      dy: 4,
      x: 150,
      y: 150,
      right_down: false,
      left_down: false,
      state: "hidden",
      paddle_x: 0,
      disp_data: [],
      word_boundaries: [],
      space_width: 0,
      line_breaks: [],
      ball_radius: 4,
      debug: false,
      width: 0,
      height: 0,
      mouse_min_x: 0,
      mouse_max_x: 0,
      aoa: 0
    };
    game = $.extend({}, game_defaults);
    cfg = $.extend({}, cfg_defaults);
  });

}).call(this);
